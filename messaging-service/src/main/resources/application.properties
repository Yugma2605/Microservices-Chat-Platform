spring.application.name=messaging-service
server.port=8083

# MySQL Configuration

#To bootstrap the application and access the credentials database initially, you need a minimal configuration (e.g. application.properties file).
#Once the application starts, the custom DataSource will override the default one and fetch the real credentials.
spring.config.import=optional:file:.env
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

spring.datasource.initialize=false

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.main.allow-circular-references=true


# Hibernate Configuration
spring.jpa.database=mysql
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.boot.allow_jdbc_metadata_access=false
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.cloud.gateway.mvc.default-filters=DedupeResponseHeader=Access-Control-Allow-Origin

# SSL Configuration (Optional for Aiven)
spring.datasource.hikari.data-source-properties.sslMode=REQUIRED
spring.datasource.hikari.data-source-properties.serverSslCert=classpath:ca.pem



# Initialize the database since the newly created Cloud SQL database has no tables. The following flag is for Spring Boot 2.5+.
spring.sql.init.mode=always
spring.profiles.active=mysql

spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*


eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
